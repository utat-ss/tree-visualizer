{
    "pipes": [],
    "interfaces": [
        {
            "name": "Requirements",
            "id": "interface-Requirements-48c23364b440fe01f41bed9b1ef04c2f981f8b649611e64457b71f16e91faad660d9ed6c2c1c1ef6f3a90feaca5b715e10154fb82fa8f80bfabeab866709c602",
            "file": "src/app/services/backend.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Node, Edge } from 'vis-network';\r\n\r\nexport interface Requirements {\r\n  nodes: Array<Node>;\r\n  edges: Array<Edge>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BackendService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getRequirements(): Observable<Requirements> {\r\n    // TODO: Define URL as env variable\r\n    // let url = \"https://3000--main--tree-visualizer--jdtech3.code.j0e.ca/api/requirements\";\r\n    let url = \"http://localhost:3000/api/requirements\"\r\n\r\n    return this.http.get<Requirements>(url)\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "edges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Edge>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Node>",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BackendService",
            "id": "injectable-BackendService-48c23364b440fe01f41bed9b1ef04c2f981f8b649611e64457b71f16e91faad660d9ed6c2c1c1ef6f3a90feaca5b715e10154fb82fa8f80bfabeab866709c602",
            "file": "src/app/services/backend.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getRequirements",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Requirements>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Node, Edge } from 'vis-network';\r\n\r\nexport interface Requirements {\r\n  nodes: Array<Node>;\r\n  edges: Array<Edge>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BackendService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getRequirements(): Observable<Requirements> {\r\n    // TODO: Define URL as env variable\r\n    // let url = \"https://3000--main--tree-visualizer--jdtech3.code.j0e.ca/api/requirements\";\r\n    let url = \"http://localhost:3000/api/requirements\"\r\n\r\n    return this.http.get<Requirements>(url)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-39da7b80475e2912c04c0deeaa60762fe7e6cb4d51858cce85a71345672c1248faa0a438f20f158e0edc06ccac044eb671f0121dc8e1b9de780be6c1ab597a2c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "new go.TreeModel({\r\n        nodeKeyProperty: \"id\",\r\n        nodeDataArray: [\r\n            {\r\n                id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n                parent: \"\",\r\n                title: \"UTAT-Team-A\",\r\n                qualifier: \"SHALL\",\r\n                type: \"Performance\",\r\n                description: \"A description\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\r\n            },\r\n            {\r\n                id: \"123456789\",\r\n                parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n                title: \"UTAT-Team-B\",\r\n                qualifier: \"SHOULD\",\r\n                type: \"Constraint\",\r\n                description: \"Another description\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/Child-1-123456789\",\r\n            },\r\n            {\r\n                id: \"abcdefghi\",\r\n                parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n                title: \"UTAT-Team-C\",\r\n                qualifier: \"SHALL\",\r\n                type: \"Component Selection\",\r\n                description:\r\n                    \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/Child-2-abcdefghi\",\r\n            },\r\n            {\r\n                id: \"qwertyuiop\",\r\n                parent: \"123456789\",\r\n                title: \"UTAT-Team-D\",\r\n                qualifier: \"SHOULD\",\r\n                type: \"A type\",\r\n                description: \"Yet another description that is just a little bit longer\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\r\n            },\r\n        ],\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Node | null",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedNode2",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Node | null",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setSelectedNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "go.Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "go.Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedNode2",
                    "args": [
                        {
                            "name": "node",
                            "type": "go.Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "go.Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\"\r\nimport * as go from \"gojs\"\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\",\r\n    styleUrls: [\"./app.component.sass\"],\r\n})\r\nexport class AppComponent {\r\n    title = \"tree-visualizer\"\r\n\r\n    public selectedNode: go.Part | null = null\r\n\r\n    model = new go.TreeModel({\r\n        nodeKeyProperty: \"id\",\r\n        nodeDataArray: [\r\n            {\r\n                id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n                parent: \"\",\r\n                title: \"UTAT-Team-A\",\r\n                qualifier: \"SHALL\",\r\n                type: \"Performance\",\r\n                description: \"A description\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\r\n            },\r\n            {\r\n                id: \"123456789\",\r\n                parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n                title: \"UTAT-Team-B\",\r\n                qualifier: \"SHOULD\",\r\n                type: \"Constraint\",\r\n                description: \"Another description\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/Child-1-123456789\",\r\n            },\r\n            {\r\n                id: \"abcdefghi\",\r\n                parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n                title: \"UTAT-Team-C\",\r\n                qualifier: \"SHALL\",\r\n                type: \"Component Selection\",\r\n                description:\r\n                    \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/Child-2-abcdefghi\",\r\n            },\r\n            {\r\n                id: \"qwertyuiop\",\r\n                parent: \"123456789\",\r\n                title: \"UTAT-Team-D\",\r\n                qualifier: \"SHOULD\",\r\n                type: \"A type\",\r\n                description: \"Yet another description that is just a little bit longer\",\r\n                rationale: \"A rationale\",\r\n                url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\r\n            },\r\n        ],\r\n    })\r\n\r\n    public setSelectedNode(node: go.Part | null) {\r\n        this.selectedNode = node\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#title\r\n    background-color: #fff\r\n    position: absolute\r\n    z-index: 10\r\n    margin: 1vh 1vh\r\n    padding: 3vh 3vh\r\n",
                    "styleUrl": "./app.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<h1 id=\"title\">TreeVisualizer</h1>\r\n\r\n<app-org-chart [model]=\"model\" (nodeClicked)=\"setSelectedNode($event)\"></app-org-chart>\r\n<app-inspector></app-inspector>\r\n"
        },
        {
            "name": "InspectorComponent",
            "id": "component-InspectorComponent-cb14db340cd6e64247c580501281befb2f0efce6dee428a4a889b40ce0b7333cbddb7f87a1288dc0f6d2886f534af6477218249167149a035471aa280883c6d0",
            "file": "src/app/components/inspector/inspector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inspector",
            "styleUrls": [
                "./inspector.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./inspector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "'Tree visualizer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "created_by",
                    "defaultValue": "'John Doe'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "description",
                    "defaultValue": "'The tree visualizer shall do things'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "last_edited",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "last_edited_by",
                    "defaultValue": "'Jane Doe'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "mission",
                    "defaultValue": "'FINCH'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "parent",
                    "defaultValue": "'FINCH-Team-Placeholder'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "qualifier",
                    "defaultValue": "'SHALL'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "qualifiers",
                    "defaultValue": "['SHALL', 'SHOULD']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rationale",
                    "defaultValue": "'To do stuff'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "read_only",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "requirement",
                    "defaultValue": "'FINCH-TreeVisualizer-Placeholder'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "stakeholders",
                    "defaultValue": "['Systems']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "system",
                    "defaultValue": "'Tree Visualizer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "trades",
                    "defaultValue": "['Trade 1 (placeholder link)']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "defaultValue": "'Functional'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "types",
                    "defaultValue": "['Functional', 'Performance', 'Environmental', 'Constraint', 'Design Standard', 'Programmatic', 'Design', 'Interface', 'Mission Assurance']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "url",
                    "defaultValue": "new URL('https://www.notion.so/FINCH-Power-Batteries-74331bc1129c417c850a0a5ca0deb759')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "URL",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "verification_method",
                    "defaultValue": "'Demonstration'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "verification_methods",
                    "defaultValue": "['Test', 'Analysis', 'Demonstration']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "verification_plans",
                    "defaultValue": "['Test plan 1 (placeholder link)']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-inspector',\r\n  templateUrl: './inspector.component.html',\r\n  styleUrls: ['./inspector.component.sass']\r\n})\r\nexport class InspectorComponent {\r\n  read_only = true;\r\n  qualifiers = ['SHALL', 'SHOULD'];\r\n  types = ['Functional', 'Performance', 'Environmental', 'Constraint', 'Design Standard', 'Programmatic', 'Design', 'Interface', 'Mission Assurance'];\r\n  verification_methods = ['Test', 'Analysis', 'Demonstration'];\r\n\r\n  requirement: string = 'FINCH-TreeVisualizer-Placeholder';\r\n  created_by: string = 'John Doe';\r\n  parent: string = 'FINCH-Team-Placeholder';\r\n  last_edited: Date = new Date();\r\n  qualifier: string = 'SHALL';\r\n  collection: string = 'Tree visualizer';\r\n  type: string = 'Functional';\r\n  verification_plans: string[] = ['Test plan 1 (placeholder link)'];\r\n  verification_method: string = 'Demonstration';\r\n  system: string = 'Tree Visualizer';\r\n  rationale: string = 'To do stuff';\r\n  trades: string[] = ['Trade 1 (placeholder link)'];\r\n  last_edited_by: string = 'Jane Doe';\r\n  stakeholders: string[] = ['Systems'];\r\n  mission: string = 'FINCH';\r\n  description: string = 'The tree visualizer shall do things'\r\n  url: URL = new URL('https://www.notion.so/FINCH-Power-Batteries-74331bc1129c417c850a0a5ca0deb759')\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field\r\n    width: 100%\r\n\r\n.readonly-property\r\n    border-left: medium solid rgba(0, 0, 0, 0.6)\r\n    margin: 0 0 2em 0\r\n    padding: 1em 0 1em 0\r\n\r\n.readonly-property p\r\n    margin: 0 0 0 1em\r\n    font-size: 16px\r\n\r\n.readonly-property p > span\r\n    font-weight: bold\r\n\r\n.readonly\r\n    display: none\r\n",
                    "styleUrl": "./inspector.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Requirement</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"requirement\">\r\n</mat-form-field>\r\n\r\n<div class=\"readonly-property\">\r\n    <p><span>Created By: </span>{{ created_by }}</p>\r\n</div>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Parent</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"parent\">\r\n</mat-form-field>\r\n\r\n<div class=\"readonly-property\">\r\n    <p><span>Last Edited: </span>{{ last_edited | date:'medium' }}</p>\r\n</div>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Qualifier</mat-label>\r\n    <mat-select [value]=\"qualifier\">\r\n        <mat-option *ngFor=\"let q of qualifiers\" [value]=\"q\" [disabled]=\"(read_only && q != qualifier) ? 'true' : null\">\r\n            {{ q }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Collection</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"collection\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Type</mat-label>\r\n    <mat-select [value]=\"type\">\r\n        <mat-option *ngFor=\"let t of types\" [value]=\"t\" [disabled]=\"(read_only && t != type) ? 'true' : null\">\r\n            {{ t }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Verification Plans</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"verification_plans[0]\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Verification Method</mat-label>\r\n    <mat-select [value]=\"verification_method\">\r\n        <mat-option *ngFor=\"let m of verification_methods\" [value]=\"m\" [disabled]=\"(read_only && m != verification_method) ? 'true' : null\">\r\n            {{ m }}\r\n        </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>System</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"system\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Rationale</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"rationale\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Trades</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"trades[0]\">\r\n</mat-form-field>\r\n\r\n<div class=\"readonly-property\">\r\n    <p><span>Last Edited By: </span>{{ last_edited_by }}</p>\r\n</div>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Stakeholders</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"stakeholders[0]\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Mission</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"mission\">\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n    <mat-label>Description</mat-label>\r\n    <input matInput [readonly]=\"read_only\" [value]=\"description\">\r\n</mat-form-field>\r\n\r\n<div class=\"readonly-property\">\r\n    <p><span>URL: </span><a [href]=\"url.href\">{{ url.href }}</a></p>\r\n</div>\r\n\r\n"
        },
        {
            "name": "NodeDirectoryComponent",
            "id": "component-NodeDirectoryComponent-4e409d4eba9654ab846657c541055879cfee9239cf7e7572478791272021d251e7ace56547e343c4143afbcb501c1148e9813b834fbc27e48f10ef18ac60b806",
            "file": "src/app/components/node-directory/node-directory.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-node-directory",
            "styleUrls": [
                "./node-directory.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./node-directory.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "defaultValue": "new go.TreeModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "go.TreeModel",
                    "decorators": []
                },
                {
                    "name": "selectedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nodeClicked2",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selectedNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Node | null",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "diagram",
                    "defaultValue": "new go.Diagram()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Diagram",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "node_found",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Node | null",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\"\r\nimport * as go from \"gojs\"\r\n\r\nconst $ = go.GraphObject.make\r\n\r\n@Component({\r\n  selector: 'app-node-directory',\r\n  templateUrl: './node-directory.component.html',\r\n  styleUrls: ['./node-directory.component.sass']\r\n})\r\nexport class NodeDirectoryComponent implements OnInit {\r\n  public diagram: go.Diagram = new go.Diagram()\r\n\r\n  @Input()\r\n  public model: go.TreeModel = new go.TreeModel()\r\n\r\n  @Output()\r\n  public nodeClicked = new EventEmitter()\r\n\r\n  constructor() {}\r\n\r\n  public ngOnInit() {}\r\n\r\n  public ngAfterViewInit(): void {\r\n      this.diagram = $(go.Diagram, \"app-node-directory\",\r\n      {\r\n        allowMove: false,\r\n        allowCopy: false,\r\n        allowDelete: false,\r\n        allowHorizontalScroll: true,\r\n        allowVerticalScroll: true,\r\n        contentAlignment: go.Spot.TopLeft,\r\n        padding: new go.Margin(75, 0, 0, 0),\r\n        layout:\r\n          $(go.TreeLayout,\r\n            {\r\n              alignment: go.TreeLayout.AlignmentStart,\r\n              angle: 0,\r\n              compaction: go.TreeLayout.CompactionNone,\r\n              layerSpacing: 16,\r\n              layerSpacingParentOverlap: 1,\r\n              nodeIndentPastParent: 1.0,\r\n              nodeSpacing: 0,\r\n              setsPortSpot: false,\r\n              setsChildPortSpot: false\r\n            })\r\n      });\r\n\r\n    // define the Node template\r\n    this.diagram.nodeTemplate =\r\n      $(go.Node, \r\n      $(\"TreeExpanderButton\",\r\n        { // customize the button's appearance\r\n          \"_treeExpandedFigure\": \"LineDown\",\r\n          \"_treeCollapsedFigure\": \"LineRight\",\r\n          \"ButtonBorder.fill\": \"whitesmoke\",\r\n          \"ButtonBorder.stroke\": null,\r\n          \"_buttonFillOver\": \"rgba(0,128,255,0.25)\",\r\n          \"_buttonStrokeOver\": null\r\n        }),\r\n      $(go.Panel, \"Horizontal\",\r\n        { position: new go.Point(18, 0) },\r\n        new go.Binding(\"background\", \"isSelected\", s => s ? \"lightblue\" : \"white\").ofObject(),\r\n        $(go.Picture,\r\n          {\r\n            width: 18, height: 18,\r\n            margin: new go.Margin(0, 4, 0, 0),\r\n            imageStretch: go.GraphObject.Uniform\r\n          },\r\n          // bind the picture source on two properties of the Node\r\n          // to display open folder, closed folder, or document\r\n          new go.Binding(\"source\", \"isTreeExpanded\", imageConverter).ofObject(),\r\n          new go.Binding(\"source\", \"isTreeLeaf\", imageConverter).ofObject()),\r\n        $(go.TextBlock,\r\n          { font: '9pt Verdana, sans-serif' },\r\n          new go.Binding(\"text\", \"title\", s => \"\" + s))\r\n      )  // end Horizontal Panel\r\n    );  // end Node\r\n\r\n  this.diagram.linkTemplate = $(go.Link)\r\n\r\n  this.diagram.model = this.model;\r\n\r\n  // takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use\r\n  function imageConverter(prop: any, picture: any) {\r\n    var node = picture.part;\r\n    if (node.isTreeLeaf) {\r\n      return \"https://www.iconpacks.net/icons/1/free-document-icon-901-thumb.png\";\r\n    } else {\r\n      if (node.isTreeExpanded) {\r\n        return \"https://www.clipartmax.com/png/middle/129-1292051_lower-nursery-open-folder-icon-png.png\";\r\n      } else {\r\n        return \"https://img.icons8.com/color/512/folder-invoices--v1.png\";\r\n      }\r\n    }\r\n  }\r\n  window.addEventListener('DOMContentLoaded', this.ngOnInit);\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#app-node-directory\r\n    position: absolute\r\n    top: 0\r\n    bottom: 0\r\n    left: 0\r\n    right: 0\r\n    width: 25%\r\n    height: 100%\r\n    background: #ffffff",
                    "styleUrl": "./node-directory.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 59
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "selectedNode": {
                    "name": "selectedNode",
                    "setSignature": {
                        "name": "selectedNode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "node",
                                "type": "go.Node | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "node",
                                "type": "go.Node | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedNode",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "templateData": "<div id=\"app-node-directory\"></div>\n{{ selectedNode }}"
        },
        {
            "name": "OrgChartComponent",
            "id": "component-OrgChartComponent-e00ebd2c1a11668361eb8b66d8c3d7aba1313fbbab960a32b4170d418f0528e771dfed997a9ecaca9e4d7d4d8612f5b56c9cb99d404285889efab90b10a8dd6b",
            "file": "src/app/components/org-chart/org-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-org-chart",
            "styleUrls": [
                "./org-chart.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./org-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "defaultValue": "new go.TreeModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "go.TreeModel",
                    "decorators": []
                },
                {
                    "name": "selectedNode2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nodeClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selectedNode2",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Node | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "diagram",
                    "defaultValue": "new go.Diagram()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Diagram",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "font",
                    "defaultValue": "\"sans-serif\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minimap",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Overview | null",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "node_found",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Node | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nodeSize",
                    "defaultValue": "new go.Size(256, 128)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showMap",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\"\r\nimport * as go from \"gojs\"\r\n\r\nconst $ = go.GraphObject.make\r\n\r\n@Component({\r\n    selector: \"app-org-chart\",\r\n    templateUrl: \"./org-chart.component.html\",\r\n    styleUrls: [\"./org-chart.component.sass\"],\r\n})\r\nexport class OrgChartComponent implements OnInit {\r\n    @Input() public model: go.TreeModel = new go.TreeModel()\r\n\r\n    @Output() public nodeClicked = new EventEmitter()\r\n\r\n    public showMap = true\r\n\r\n    private diagram: go.Diagram | null = null\r\n    private minimap: go.Overview | null = null\r\n    private nodeSize = new go.Size(256, 128)\r\n    private font = \"sans-serif\"\r\n\r\n    public ngOnInit() {\r\n        this.diagram = $(go.Diagram, \"app-org-chart\", {\r\n            allowCopy: false,\r\n            allowDelete: false,\r\n            layout: $(go.TreeLayout, {\r\n                treeStyle: go.TreeLayout.StyleLastParents,\r\n                arrangement: go.TreeLayout.ArrangementHorizontal,\r\n                // properties for most of the tree:\r\n                angle: 90,\r\n                layerSpacing: 35,\r\n                // properties for the leaf parents:\r\n                alternateAngle: 90,\r\n                alternateLayerSpacing: 35,\r\n                alternateAlignment: go.TreeLayout.AlignmentBus,\r\n                alternateNodeSpacing: 20,\r\n            }),\r\n            \"undoManager.isEnabled\": true,\r\n        })\r\n\r\n        this.diagram.nodeTemplate = $(\r\n            go.Node,\r\n            \"Auto\",\r\n            {\r\n                desiredSize: this.nodeSize,\r\n                isShadowed: true,\r\n                shadowOffset: new go.Point(2, 2),\r\n                shadowColor: \"#DDD\",\r\n                shadowBlur: 6,\r\n                mouseDragEnter: (e, node, prev) => {\r\n                    const shape: go.Shape = (node as go.Part).findObject(\r\n                        \"SHAPE\"\r\n                    ) as go.Shape\r\n                    shape.stroke = \"dodgerblue\"\r\n                    shape.strokeWidth = 3\r\n\r\n                    const shape2: go.Shape = (prev as go.Part).findObject(\r\n                        \"SHAPE\"\r\n                    ) as go.Shape\r\n                    shape2.stroke = \"green\"\r\n                    shape2.strokeWidth = 3\r\n                },\r\n                mouseDragLeave: (e, node, next) => {\r\n                    const shape: go.Shape = (node as go.Part).findObject(\r\n                        \"SHAPE\"\r\n                    ) as go.Shape\r\n                    shape.stroke = \"dodgerblue\"\r\n                    shape.strokeWidth = 0\r\n                },\r\n                mouseDrop: (e, node) => {\r\n                    const diagram = node.diagram\r\n                    const selnode = diagram?.selection.first() as go.Node // assume just one Node in selection\r\n                    // find any existing link into the selected node\r\n                    const link = selnode.findTreeParentLink()\r\n                    if (link !== null) {\r\n                        // reconnect any existing link\r\n                        link.fromNode = node as go.Node\r\n                    } else {\r\n                        // else create a new link\r\n                        diagram?.toolManager.linkingTool.insertLink(\r\n                            node as go.Node,\r\n                            (node as go.Node).port,\r\n                            selnode,\r\n                            selnode.port\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n            $(go.Shape, \"Rectangle\", { name: \"SHAPE\", fill: \"white\", strokeWidth: 0 }),\r\n            $(\r\n                go.Panel,\r\n                \"Table\",\r\n                {\r\n                    alignment: go.Spot.TopLeft,\r\n                    margin: 16,\r\n                    defaultAlignment: go.Spot.Left,\r\n                },\r\n                $(go.RowColumnDefinition, {\r\n                    column: 0,\r\n                    width: this.nodeSize.width - 50,\r\n                }),\r\n                $(\r\n                    go.TextBlock,\r\n                    {\r\n                        row: 0,\r\n                        column: 0,\r\n                        font: \"bold 12pt \" + this.font,\r\n                        overflow: go.TextBlock.OverflowEllipsis,\r\n                    },\r\n                    new go.Binding(\"text\", \"title\")\r\n                ),\r\n                $(\r\n                    go.Shape, // chip\r\n                    \"RoundedRectangle\",\r\n                    {\r\n                        row: 1,\r\n                        column: 0,\r\n                        width: 70,\r\n                        height: 18,\r\n                        parameter1: 100,\r\n                        strokeWidth: 0,\r\n                    },\r\n                    new go.Binding(\"fill\", \"qualifier\", (qualifier) => {\r\n                        if (qualifier === \"SHALL\") {\r\n                            return \"#06c769\" // green\r\n                        } else if (qualifier === \"SHOULD\") {\r\n                            return \"#2196f3\" // blue\r\n                        } else {\r\n                            return \"#cccccc\" // default grey\r\n                        }\r\n                    })\r\n                ),\r\n                $(\r\n                    go.TextBlock,\r\n                    {\r\n                        row: 1,\r\n                        column: 0,\r\n                        font: \"10pt \" + this.font,\r\n                        stroke: \"white\",\r\n                        margin: 6,\r\n                    },\r\n                    new go.Binding(\"text\", \"qualifier\")\r\n                ),\r\n                $(\r\n                    go.TextBlock,\r\n                    {\r\n                        row: 2,\r\n                        column: 0,\r\n                        font: \"10pt \" + this.font,\r\n                        stretch: go.GraphObject.Fill,\r\n                        maxLines: 3,\r\n                        overflow: go.TextBlock.OverflowEllipsis,\r\n                    },\r\n                    new go.Binding(\"text\", \"description\")\r\n                )\r\n            )\r\n        )\r\n\r\n        this.diagram.linkTemplate = $(\r\n            go.Link, // the whole link panel\r\n            go.Link.Orthogonal,\r\n            $(go.Shape) // the link shape, default black stroke\r\n        )\r\n\r\n        this.minimap = $(go.Overview, \"app-minimap\", { observed: this.diagram })\r\n\r\n        this.diagram.model = this.model\r\n\r\n        // when selection changes, emit event to update the selected node\r\n        this.diagram.addDiagramListener(\"ChangedSelection\", (e) => {\r\n            const node = this.diagram?.selection.first()\r\n            console.log(this.model.toJson())\r\n            this.nodeClicked.emit(node)\r\n        })\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#app-org-chart\r\n    background: whitesmoke\r\n    margin: 5px 5px\r\n    width: 98vw\r\n    height: 98vh\r\n    border: 1px solid black\r\n\r\n#app-minimap\r\n    position: absolute\r\n    margin: 32px\r\n    top: 0\r\n    right: 0\r\n    width: 16%\r\n    height: 16%\r\n    border: 1px solid black\r\n",
                    "styleUrl": "./org-chart.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 70
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n    <div id=\"app-org-chart\"></div>\r\n    <div id=\"app-minimap\"></div>\r\n</div>\r\n\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-5f93730d8ee18b3d0c78e73b076adb77cc913716409ccadec6523d76f878c72f16ae204adabb105905b294c5af7adc1b43d009f0b478e3e2bb30451cc8459c51",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\"\r\nimport { BrowserModule } from \"@angular/platform-browser\"\r\nimport { HttpClientModule } from \"@angular/common/http\"\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { OrgChartComponent } from \"./components/org-chart/org-chart.component\";\r\nimport { NodeDirectoryComponent } from './components/node-directory/node-directory.component';\r\nimport { InspectorComponent } from './components/inspector/inspector.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    OrgChartComponent,\r\n    NodeDirectoryComponent,\r\n    InspectorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "InspectorComponent"
                        },
                        {
                            "name": "NodeDirectoryComponent"
                        },
                        {
                            "name": "OrgChartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-c68d9ea55ca484d5f473c0f9826d34b60878e736b364d02a1e184dcec84ed779f543f469f63802f271fe901994f668ce4d38df11293b9386a49a5e0336dfda1a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\"\r\nimport { RouterModule, Routes } from \"@angular/router\"\r\n\r\nconst routes: Routes = []\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "go.GraphObject.make"
            },
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "go.GraphObject.make"
            },
            {
                "name": "Cycle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Editable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/inspector/inspector.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "go.TreeModel",
                "defaultValue": "new go.TreeModel({\n    nodeKeyProperty: \"id\",\n    nodeDataArray: [\n        {\n            id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            parent: \"\",\n            title: \"UTAT-Team-A\",\n            qualifier: \"SHALL\",\n            type: \"Performance\",\n            description: \"A description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n            color: \"red\"\n        },\n        {\n            id: \"123456789\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-B\",\n            qualifier: \"SHOULD\",\n            type: \"Constraint\",\n            description: \"Another description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-1-123456789\",\n            color: \"red\"\n        },\n        {\n            id: \"abcdefghi\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-C\",\n            qualifier: \"SHALL\",\n            type: \"Component Selection\",\n            description:\n                \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-2-abcdefghi\",\n            color: \"red\"\n        },\n        {\n            id: \"qwertyuiop\",\n            parent: \"123456789\",\n            title: \"UTAT-Team-D\",\n            qualifier: \"SHOULD\",\n            type: \"A type\",\n            description: \"Yet another description that is just a little bit longer\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n            color: \"red\"\n        },\n    ],\n  })"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "go.TreeModel",
                "defaultValue": "new go.TreeModel({\r\n  nodeKeyProperty: \"id\",\r\n  nodeDataArray: [\r\n      {\r\n          id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n          parent: \"\",\r\n          title: \"UTAT-Team-A\",\r\n          qualifier: \"SHALL\",\r\n          type: \"Performance\",\r\n          description: \"A description\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\r\n      },\r\n      {\r\n          id: \"123456789\",\r\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n          title: \"UTAT-Team-B\",\r\n          qualifier: \"SHOULD\",\r\n          type: \"Constraint\",\r\n          description: \"Another description\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/Child-1-123456789\",\r\n      },\r\n      {\r\n          id: \"abcdefghi\",\r\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n          title: \"UTAT-Team-C\",\r\n          qualifier: \"SHALL\",\r\n          type: \"Component Selection\",\r\n          description:\r\n              \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/Child-2-abcdefghi\",\r\n      },\r\n      {\r\n          id: \"qwertyuiop\",\r\n          parent: \"123456789\",\r\n          title: \"UTAT-Team-D\",\r\n          qualifier: \"SHOULD\",\r\n          type: \"A type\",\r\n          description: \"Yet another description that is just a little bit longer\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\r\n      },\r\n  ],\r\n})"
            },
            {
                "name": "Readonly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/inspector/inspector.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/inspector/inspector.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InspectorComponent>",
                "defaultValue": "(args: InspectorComponent) => ({\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n    props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/node-directory/node-directory.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "go.GraphObject.make"
                }
            ],
            "src/app/components/org-chart/org-chart.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "go.GraphObject.make"
                }
            ],
            "src/app/components/org-chart/org-chart.component.stories.ts": [
                {
                    "name": "Cycle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n    props: args,\r\n})"
                }
            ],
            "src/app/app.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "defaultValue": "new go.TreeModel({\n    nodeKeyProperty: \"id\",\n    nodeDataArray: [\n        {\n            id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            parent: \"\",\n            title: \"UTAT-Team-A\",\n            qualifier: \"SHALL\",\n            type: \"Performance\",\n            description: \"A description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n            color: \"red\"\n        },\n        {\n            id: \"123456789\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-B\",\n            qualifier: \"SHOULD\",\n            type: \"Constraint\",\n            description: \"Another description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-1-123456789\",\n            color: \"red\"\n        },\n        {\n            id: \"abcdefghi\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-C\",\n            qualifier: \"SHALL\",\n            type: \"Component Selection\",\n            description:\n                \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-2-abcdefghi\",\n            color: \"red\"\n        },\n        {\n            id: \"qwertyuiop\",\n            parent: \"123456789\",\n            title: \"UTAT-Team-D\",\n            qualifier: \"SHOULD\",\n            type: \"A type\",\n            description: \"Yet another description that is just a little bit longer\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n            color: \"red\"\n        },\n    ],\n  })"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n    props: args,\n})"
                }
            ],
            "src/app/components/node-directory/node-directory.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "defaultValue": "new go.TreeModel({\r\n  nodeKeyProperty: \"id\",\r\n  nodeDataArray: [\r\n      {\r\n          id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n          parent: \"\",\r\n          title: \"UTAT-Team-A\",\r\n          qualifier: \"SHALL\",\r\n          type: \"Performance\",\r\n          description: \"A description\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\r\n      },\r\n      {\r\n          id: \"123456789\",\r\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n          title: \"UTAT-Team-B\",\r\n          qualifier: \"SHOULD\",\r\n          type: \"Constraint\",\r\n          description: \"Another description\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/Child-1-123456789\",\r\n      },\r\n      {\r\n          id: \"abcdefghi\",\r\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\r\n          title: \"UTAT-Team-C\",\r\n          qualifier: \"SHALL\",\r\n          type: \"Component Selection\",\r\n          description:\r\n              \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/Child-2-abcdefghi\",\r\n      },\r\n      {\r\n          id: \"qwertyuiop\",\r\n          parent: \"123456789\",\r\n          title: \"UTAT-Team-D\",\r\n          qualifier: \"SHOULD\",\r\n          type: \"A type\",\r\n          description: \"Yet another description that is just a little bit longer\",\r\n          rationale: \"A rationale\",\r\n          url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\r\n      },\r\n  ],\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n    props: args,\r\n})"
                }
            ],
            "src/app/components/inspector/inspector.stories.ts": [
                {
                    "name": "Editable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/inspector/inspector.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Readonly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/inspector/inspector.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/inspector/inspector.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InspectorComponent>",
                    "defaultValue": "(args: InspectorComponent) => ({\r\n    props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/diagram/diagram.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inspector/inspector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InspectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inspector/inspector.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Editable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inspector/inspector.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Readonly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inspector/inspector.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeDirectoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Cycle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrgChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/backend.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BackendService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/backend.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Requirements",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}