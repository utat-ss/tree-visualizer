{
    "pipes": [],
    "interfaces": [
        {
            "name": "Requirements",
            "id": "interface-Requirements-c06dbdf83254d7570c4a3c445de7397014fc968c18699a9e985493960627dfa5b2334e80d50d835b1ac85e6cbbf61fddc4910be8eac5343170ec10415a2ae6ea",
            "file": "src/app/services/backend.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Node, Edge } from 'vis-network';\n\nexport interface Requirements {\n  nodes: Array<Node>;\n  edges: Array<Edge>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n  constructor(private http: HttpClient) {}\n\n  getRequirements(): Observable<Requirements> {\n    // TODO: Define URL as env variable\n    // let url = \"https://3000--main--tree-visualizer--jdtech3.code.j0e.ca/api/requirements\";\n    let url = \"http://localhost:3000/api/requirements\"\n\n    return this.http.get<Requirements>(url)\n  }\n}\n",
            "properties": [
                {
                    "name": "edges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Edge>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Node>",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BackendService",
            "id": "injectable-BackendService-c06dbdf83254d7570c4a3c445de7397014fc968c18699a9e985493960627dfa5b2334e80d50d835b1ac85e6cbbf61fddc4910be8eac5343170ec10415a2ae6ea",
            "file": "src/app/services/backend.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getRequirements",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Requirements>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Node, Edge } from 'vis-network';\n\nexport interface Requirements {\n  nodes: Array<Node>;\n  edges: Array<Edge>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n  constructor(private http: HttpClient) {}\n\n  getRequirements(): Observable<Requirements> {\n    // TODO: Define URL as env variable\n    // let url = \"https://3000--main--tree-visualizer--jdtech3.code.j0e.ca/api/requirements\";\n    let url = \"http://localhost:3000/api/requirements\"\n\n    return this.http.get<Requirements>(url)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-dfc697a244c0badceadc5762118149d2621518e5dec433f8343beaf5039ff45b5922aa16df483f30d8cfb2584f0c76611e742bb5eb76e8938e44c725bddfefb1",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Part | null",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "\"tree-visualizer\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "buildTreeModel",
                    "args": [
                        {
                            "name": "r",
                            "type": "Requirements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "r",
                            "type": "Requirements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "go.Part | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "go.Part | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\"\nimport * as go from \"gojs\"\nimport { BackendService, Requirements } from \"./services/backend.service\"\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.sass\"],\n})\nexport class AppComponent {\n    title = \"tree-visualizer\"\n\n    model: go.TreeModel | null = null\n\n    public selectedNode: go.Part | null = null\n\n    constructor(private backend: BackendService) {};\n\n    ngOnInit(): void {\n        // Fire HTTML req and set callback\n        this.backend.getRequirements().subscribe(this.buildTreeModel);\n    }\n\n    buildTreeModel(r: Requirements) {\n        this.model = new go.TreeModel({\n            nodeKeyProperty: \"id\",\n            nodeDataArray: [ r.nodes ]\n        })\n    }\n\n    public setSelectedNode(node: go.Part | null) {\n        this.selectedNode = node\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "backend",
                        "type": "BackendService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "backend",
                        "type": "BackendService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-node-directory [model]=\"model\" (nodeClicked)=\"setSelectedNode($event)\"></app-node-directory>\n<app-org-chart [model]=\"model\" (nodeClicked)=\"setSelectedNode($event)\"></app-org-chart>"
        },
        {
            "name": "MergedComponentsComponent",
            "id": "component-MergedComponentsComponent-450633f8d46ec123679eb55034769d8d0e552e05c81298c3719211296405881b0c9e43e54868df0dfc5e0c8149716468134739aac7f5a283523a7c438e5b9808",
            "file": "src/app/components/merged-components/merged-components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NodeDirectoryComponent",
                    "type": "component"
                },
                {
                    "name": "OrgChartComponent",
                    "type": "component"
                }
            ],
            "selector": "app-merged-components",
            "styleUrls": [
                "./merged-components.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./merged-components.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "defaultValue": "new go.TreeModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "go.TreeModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nodeClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\"\nimport * as go from \"gojs\"\n\nimport { NodeDirectoryComponent } from '../node-directory/node-directory.component';\nimport { OrgChartComponent } from '../org-chart/org-chart.component';\n\n@Component({\n  selector: 'app-merged-components',\n  templateUrl: './merged-components.component.html',\n  styleUrls: ['./merged-components.component.sass'],\n  providers: [NodeDirectoryComponent, OrgChartComponent]\n})\nexport class MergedComponentsComponent implements OnInit{\n\n  @Input()\n  public model: go.TreeModel = new go.TreeModel()\n\n  @Output()\n  public nodeClicked: EventEmitter<any> = new EventEmitter()\n\n  public ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./merged-components.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-org-chart\n    [model]=\"model\"\n>\n</app-org-chart>\n<app-node-directory\n    [model]=\"model\"\n>\n</app-node-directory>"
        },
        {
            "name": "NodeDirectoryComponent",
            "id": "component-NodeDirectoryComponent-a2c7f49003f6a669bac82fb04ad8b6cecd69054832b002f03feed7904004397f111e7096abd9587be70a5df395e4f78fd0153c77551a8e5b81e97031d023766f",
            "file": "src/app/components/node-directory/node-directory.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-node-directory",
            "styleUrls": [
                "./node-directory.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./node-directory.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "defaultValue": "new go.TreeModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "go.TreeModel | null",
                    "decorators": []
                },
                {
                    "name": "selectedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nodeClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagram",
                    "defaultValue": "new go.Diagram()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Diagram",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "findPartForKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "arg0",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "arg0",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\"\nimport * as go from \"gojs\"\n// import { DiagramSyncService } from '../../services/diagram-sync.service';\n\nconst $ = go.GraphObject.make\n\n@Component({\n  selector: 'app-node-directory',\n  templateUrl: './node-directory.component.html',\n  styleUrls: ['./node-directory.component.sass']\n  //template: `<button class='btn btn-primary' (click)=\"nodeClickedFunction()\">Click me\"</button>`\n})\n\nexport class NodeDirectoryComponent implements OnInit {\n  static select(arg0: any) {\n    throw new Error(\"Method not implemented.\");\n  }\n  static findPartForKey(key: any): any {\n    throw new Error(\"Method not implemented.\");\n  }\n  public diagram: go.Diagram = new go.Diagram()\n\n  @Input()\n  public selectedNode: any;\n\n  @Input()\n  public model: go.TreeModel | null = new go.TreeModel()\n\n  @Output()\n  public nodeClicked: EventEmitter<any> = new EventEmitter()\n  \n  static selection: any;\n  static model: go.TreeModel;\n\n  // constructor() {}\n  \n  public ngOnInit() {}\n\n  public ngAfterViewInit(): void {\n      this.diagram = $(go.Diagram, \"app-node-directory\",\n      {\n        allowMove: false,\n        allowCopy: false,\n        allowDelete: false,\n        allowHorizontalScroll: true,\n        allowVerticalScroll: true,\n        contentAlignment: go.Spot.TopLeft,\n        padding: new go.Margin(75, 0, 0, 0),\n        maxSelectionCount: 1,\n        layout:\n          $(go.TreeLayout,\n            {\n              alignment: go.TreeLayout.AlignmentStart,\n              angle: 0,\n              compaction: go.TreeLayout.CompactionNone,\n              layerSpacing: 16,\n              layerSpacingParentOverlap: 1,\n              nodeIndentPastParent: 1.0,\n              nodeSpacing: 0,\n              setsPortSpot: false,\n              setsChildPortSpot: false\n            }),\n            \"undoManager.isEnabled\": true,\n      });\n\n    // define the Node template\n    this.diagram.nodeTemplate =\n      $(go.Node,\n        'Auto',\n      $(\"TreeExpanderButton\",\n        { // customize the button's appearance\n          \"_treeExpandedFigure\": \"LineDown\",\n          \"_treeCollapsedFigure\": \"LineRight\",\n          \"ButtonBorder.fill\": \"whitesmoke\",\n          \"ButtonBorder.stroke\": null,\n          \"_buttonFillOver\": \"rgba(0,128,255,0.25)\",\n          \"_buttonStrokeOver\": null\n        }),\n      $(go.Panel, \"Horizontal\",\n        { position: new go.Point(18, 0) },\n        new go.Binding(\"background\", \"isSelected\", s => s ? \"lightblue\" : \"white\").ofObject(),\n        $(go.Picture,\n          {\n            width: 18, height: 18,\n            margin: new go.Margin(0, 4, 0, 0),\n            imageStretch: go.GraphObject.Uniform\n          },\n          // bind the picture source on two properties of the Node\n          // to display open folder, closed folder, or document\n          new go.Binding(\"source\", \"isTreeExpanded\", imageConverter).ofObject(),\n          new go.Binding(\"source\", \"isTreeLeaf\", imageConverter).ofObject()),\n        $(go.TextBlock,\n          { font: '9pt Verdana, sans-serif' },\n          new go.Binding(\"text\", \"title\", s => \"\" + s))\n      )  // end Horizontal Panel\n    );  // end Node\n\n  this.diagram.linkTemplate = $(go.Link)\n\n  this.diagram.model = this.model as go.TreeModel;\n  \n  this.diagram.addDiagramListener(\"ChangedSelection\", (e) => {\n    const node = this.diagram?.selection.first()\n    console.log(node?.data.id)\n    this.nodeClicked.emit(node)\n})\n\n  // takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use\n  function imageConverter(prop: any, picture: any) {\n    var node = picture.part;\n    if (node.isTreeLeaf) {\n      return \"https://www.iconpacks.net/icons/1/free-document-icon-901-thumb.png\";\n    } else {\n      if (node.isTreeExpanded) {\n        return \"https://www.clipartmax.com/png/middle/129-1292051_lower-nursery-open-folder-icon-png.png\";\n      } else {\n        return \"https://img.icons8.com/color/512/folder-invoices--v1.png\";\n      }\n    }\n  }\n  window.addEventListener('DOMContentLoaded', this.ngOnInit);\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#app-node-directory\n    position: absolute\n    top: 0\n    bottom: 0\n    left: 0\n    right: 0\n    width: 20%\n    height: 100%\n    background: #ffffff",
                    "styleUrl": "./node-directory.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"app-node-directory\"></div>\n"
        },
        {
            "name": "OrgChartComponent",
            "id": "component-OrgChartComponent-3f75ef1410c1e546791864953aa0e435fe2e1cbd4bc8843c7fb293dc5a6d18cac7080f35345d44bd1f3a89b9d76d45a0bf3a211eb19c7369f1e99c6e3b826c63",
            "file": "src/app/components/org-chart/org-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-org-chart",
            "styleUrls": [
                "./org-chart.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./org-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "defaultValue": "new go.TreeModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "go.TreeModel | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any"
                }
            ],
            "propertiesClass": [
                {
                    "name": "diagram",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Diagram | null",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "font",
                    "defaultValue": "\"sans-serif\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "minimap",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.Overview | null",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "nodeSize",
                    "defaultValue": "new go.Size(256, 128)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedOrgNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showMap",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onNodeClicked",
                    "args": [
                        {
                            "name": "node",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToRect",
                    "args": [
                        {
                            "name": "actualBounds",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "actualBounds",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\"\n//import { DiagramSyncService } from '../../services/diagram-sync.service';\nimport * as go from \"gojs\"\n\nconst $ = go.GraphObject.make\n\n@Component({\n    selector: \"app-org-chart\",\n    templateUrl: \"./org-chart.component.html\",\n    styleUrls: [\"./org-chart.component.sass\"],\n    //template: `<app-node-directory (nodeClicked)=\"displayCounter($event)\"><app-node-directory>`\n})\nexport class OrgChartComponent implements OnInit {\n    static scrollToRect(actualBounds: any) {\n      throw new Error(\"Method not implemented.\")\n    }\n\n    @Input() public model: go.TreeModel | null = new go.TreeModel()\n\n    @Output() \n    // public nodeClicked: EventEmitter<any> = new EventEmitter()\n\n    /*displayNode(nodeClicked: any) {\n        console.log(nodeClicked)\n    }*/\n\n    selectedNode: any;\n    selectedOrgNode: any;\n\n    onNodeClicked(node: any) {\n        this.selectedNode = node;}\n\n    public showMap = true\n\n    private diagram: go.Diagram | null = null\n    private minimap: go.Overview | null = null\n    private nodeSize = new go.Size(256, 128)\n    private font = \"sans-serif\"\n    static selection: any\n\n    public ngOnInit() {\n        this.diagram = $(go.Diagram, \"app-org-chart\", {\n            allowCopy: false,\n            allowDelete: false,\n            maxSelectionCount: 1,\n            layout: $(go.TreeLayout, {\n                treeStyle: go.TreeLayout.StyleLastParents,\n                arrangement: go.TreeLayout.ArrangementHorizontal,\n                // properties for most of the tree:\n                angle: 90,\n                layerSpacing: 35,\n                // properties for the leaf parents:\n                alternateAngle: 90,\n                alternateLayerSpacing: 35,\n                alternateAlignment: go.TreeLayout.AlignmentBus,\n                alternateNodeSpacing: 20,\n            }),\n            \"undoManager.isEnabled\": true,\n        })\n\n        this.diagram.nodeTemplate = $(\n            go.Node,\n            \"Auto\",\n            {\n                desiredSize: this.nodeSize,\n                isShadowed: true,\n                shadowOffset: new go.Point(2, 2),\n                shadowColor: \"#DDD\",\n                shadowBlur: 6,\n                mouseDragEnter: (e, node, prev) => {\n                    const shape: go.Shape = (node as go.Part).findObject(\n                        \"SHAPE\"\n                    ) as go.Shape\n                    shape.stroke = \"dodgerblue\"\n                    shape.strokeWidth = 3\n\n                    const shape2: go.Shape = (prev as go.Part).findObject(\n                        \"SHAPE\"\n                    ) as go.Shape\n                    shape2.stroke = \"green\"\n                    shape2.strokeWidth = 3\n                },\n                mouseDragLeave: (e, node, next) => {\n                    const shape: go.Shape = (node as go.Part).findObject(\n                        \"SHAPE\"\n                    ) as go.Shape\n                    shape.stroke = \"dodgerblue\"\n                    shape.strokeWidth = 0\n                },\n                mouseDrop: (e, node) => {\n                    const diagram = node.diagram\n                    const selnode = diagram?.selection.first() as go.Node // assume just one Node in selection\n                    // find any existing link into the selected node\n                    const link = selnode.findTreeParentLink()\n                    if (link !== null) {\n                        // reconnect any existing link\n                        link.fromNode = node as go.Node\n                    } else {\n                        // else create a new link\n                        diagram?.toolManager.linkingTool.insertLink(\n                            node as go.Node,\n                            (node as go.Node).port,\n                            selnode,\n                            selnode.port\n                        )\n                    }\n                },\n            },\n            $(go.Shape, \"Rectangle\", { name: \"SHAPE\", fill: \"white\", strokeWidth: 0 }),\n            $(\n                go.Panel,\n                \"Table\",\n                {\n                    alignment: go.Spot.TopLeft,\n                    margin: 16,\n                    defaultAlignment: go.Spot.Left,\n                },\n                $(go.RowColumnDefinition, {\n                    column: 0,\n                    width: this.nodeSize.width - 50,\n                }),\n                $(\n                    go.TextBlock,\n                    {\n                        row: 0,\n                        column: 0,\n                        font: \"bold 12pt \" + this.font,\n                        overflow: go.TextBlock.OverflowEllipsis,\n                    },\n                    new go.Binding(\"text\", \"title\")\n                ),\n                $(\n                    go.Shape, // chip\n                    \"RoundedRectangle\",\n                    {\n                        row: 1,\n                        column: 0,\n                        width: 70,\n                        height: 18,\n                        parameter1: 100,\n                        strokeWidth: 0,\n                    },\n                    new go.Binding(\"fill\", \"qualifier\", (qualifier) => {\n                        if (qualifier === \"SHALL\") {\n                            return \"#06c769\" // green\n                        } else if (qualifier === \"SHOULD\") {\n                            return \"#2196f3\" // blue\n                        } else {\n                            return \"#cccccc\" // default grey\n                        }\n                    })\n                ),\n                $(\n                    go.TextBlock,\n                    {\n                        row: 1,\n                        column: 0,\n                        font: \"10pt \" + this.font,\n                        stroke: \"white\",\n                        margin: 6,\n                    },\n                    new go.Binding(\"text\", \"qualifier\")\n                ),\n                $(\n                    go.TextBlock,\n                    {\n                        row: 2,\n                        column: 0,\n                        font: \"10pt \" + this.font,\n                        stretch: go.GraphObject.Fill,\n                        maxLines: 3,\n                        overflow: go.TextBlock.OverflowEllipsis,\n                    },\n                    new go.Binding(\"text\", \"description\")\n                )\n            )\n        )\n\n        this.diagram.linkTemplate = $(\n            go.Link, // the whole link panel\n            go.Link.Orthogonal,\n            $(go.Shape) // the link shape, default black stroke\n        )\n\n        this.minimap = $(go.Overview, \"app-minimap\", { observed: this.diagram })\n\n        this.diagram.model = this.model as go.TreeModel;\n\n        this.selectedOrgNode = this.diagram.findNodesByExample({ key: this.selectedNode.key }, \n                                                            { value: this.selectedNode.value },\n                                                            { id: this.selectedNode.id });\n\n        this.selectedOrgNode.color = 'red'\n\n        // when selection changes, emit event to update the selected node\n        \n        /*this.diagram.addDiagramListener(\"ChangedSelection\", (e) => {\n            const node = this.diagram?.selection.first()\n            console.log(node?.data.id)\n            this.nodeClicked.emit(node)\n        })*/\n\n        // Add node click event listener\n        /*this.diagram.addDiagramListener('ObjectSingleClicked', (e: go.DiagramEvent) => {\n            const node = e.subject.part;\n            if (node instanceof go.Node) {\n              this.diagramSyncService.notifyNodeClick(node);\n            }\n          });*/\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#app-org-chart\n    position: absolute\n    top: 0\n    right: 0\n    bottom: 0\n    left: 0\n    width: 100%\n    height: 100%\n    background-color: #F8F8F8\n\n#app-minimap\n    position: absolute\n    margin: 32px\n    top: 0\n    right: 0\n    width: 16%\n    height: 16%\n    border: 1px solid black\n",
                    "styleUrl": "./org-chart.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n    <app-node-directory (nodeClicked)=\"onNodeClicked($event)\"></app-node-directory>\n    <div id=\"app-org-chart\">[selectedNode]=\"selectedNode\"</div>\n    <div id=\"app-minimap\">[selectedNode]=\"selectedNode\"</div>\n</div>\n\n\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-01384699fd65760d5ab6d488aa5468f1ede99ca83e60116eb062da16610d82470dbc0da842e6bbd77d548c688469b5ed0c64d3eaebd46dc4440a4f2be3f9459e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\"\nimport { BrowserModule } from \"@angular/platform-browser\"\nimport { HttpClientModule } from \"@angular/common/http\"\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OrgChartComponent } from \"./components/org-chart/org-chart.component\";\nimport { NodeDirectoryComponent } from './components/node-directory/node-directory.component';\nimport { MergedComponentsComponent } from './components/merged-components/merged-components.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    OrgChartComponent,\n    NodeDirectoryComponent,\n    MergedComponentsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MergedComponentsComponent"
                        },
                        {
                            "name": "NodeDirectoryComponent"
                        },
                        {
                            "name": "OrgChartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-300d8db993c2e4f6937a80d5621f170604c487e0b8cc75c75c0bfb3a5795d4adbad63ad38ab98380f2f6bed4d335641a600295f5592ff6447d6dcb768aa5bfaf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\"\nimport { RouterModule, Routes } from \"@angular/router\"\n\nconst routes: Routes = []\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "go.GraphObject.make"
            },
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "go.GraphObject.make"
            },
            {
                "name": "Cycle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/merged-components/merged-components.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/merged-components/merged-components.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "go.TreeModel",
                "defaultValue": "new go.TreeModel({\n  nodeKeyProperty: \"id\",\n  nodeDataArray: [\n      {\n          id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n          parent: \"\",\n          title: \"UTAT-Team-A\",\n          qualifier: \"SHALL\",\n          type: \"Performance\",\n          description: \"A description\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n      },\n      {\n          id: \"123456789\",\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n          title: \"UTAT-Team-B\",\n          qualifier: \"SHOULD\",\n          type: \"Constraint\",\n          description: \"Another description\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/Child-1-123456789\",\n      },\n      {\n          id: \"abcdefghi\",\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n          title: \"UTAT-Team-C\",\n          qualifier: \"SHALL\",\n          type: \"Component Selection\",\n          description:\n              \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/Child-2-abcdefghi\",\n      },\n      {\n          id: \"qwertyuiop\",\n          parent: \"123456789\",\n          title: \"UTAT-Team-D\",\n          qualifier: \"SHOULD\",\n          type: \"A type\",\n          description: \"Yet another description that is just a little bit longer\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n      },\n  ],\n})"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "go.TreeModel",
                "defaultValue": "new go.TreeModel({\n    nodeKeyProperty: \"id\",\n    nodeDataArray: [\n        {\n            id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            parent: \"\",\n            title: \"UTAT-Team-A\",\n            qualifier: \"SHALL\",\n            type: \"Performance\",\n            description: \"A description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n        },\n        {\n            id: \"123456789\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-B\",\n            qualifier: \"SHOULD\",\n            type: \"Constraint\",\n            description: \"Another description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-1-123456789\",\n        },\n        {\n            id: \"abcdefghi\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-C\",\n            qualifier: \"SHALL\",\n            type: \"Component Selection\",\n            description:\n                \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-2-abcdefghi\",\n        },\n        {\n            id: \"qwertyuiop\",\n            parent: \"123456789\",\n            title: \"UTAT-Team-D\",\n            qualifier: \"SHOULD\",\n            type: \"A type\",\n            description: \"Yet another description that is just a little bit longer\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n        },\n    ],\n  })"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "go.TreeModel",
                "defaultValue": "new go.TreeModel({\n    nodeKeyProperty: \"id\",\n    nodeDataArray: [\n        {\n            id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            parent: \"\",\n            title: \"UTAT-Team-A\",\n            qualifier: \"SHALL\",\n            type: \"Performance\",\n            description: \"A description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n        },\n        {\n            id: \"123456789\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-B\",\n            qualifier: \"SHOULD\",\n            type: \"Constraint\",\n            description: \"Another description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-1-123456789\",\n        },\n        {\n            id: \"abcdefghi\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-C\",\n            qualifier: \"SHALL\",\n            type: \"Component Selection\",\n            description:\n                \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-2-abcdefghi\",\n        },\n        {\n            id: \"qwertyuiop\",\n            parent: \"123456789\",\n            title: \"UTAT-Team-D\",\n            qualifier: \"SHOULD\",\n            type: \"A type\",\n            description: \"Yet another description that is just a little bit longer\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n        },\n    ],\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/merged-components/merged-components.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n    props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/node-directory/node-directory.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "go.GraphObject.make"
                }
            ],
            "src/app/components/org-chart/org-chart.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "go.GraphObject.make"
                }
            ],
            "src/app/components/org-chart/org-chart.component.stories.ts": [
                {
                    "name": "Cycle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "defaultValue": "new go.TreeModel({\n    nodeKeyProperty: \"id\",\n    nodeDataArray: [\n        {\n            id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            parent: \"\",\n            title: \"UTAT-Team-A\",\n            qualifier: \"SHALL\",\n            type: \"Performance\",\n            description: \"A description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n        },\n        {\n            id: \"123456789\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-B\",\n            qualifier: \"SHOULD\",\n            type: \"Constraint\",\n            description: \"Another description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-1-123456789\",\n        },\n        {\n            id: \"abcdefghi\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-C\",\n            qualifier: \"SHALL\",\n            type: \"Component Selection\",\n            description:\n                \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-2-abcdefghi\",\n        },\n        {\n            id: \"qwertyuiop\",\n            parent: \"123456789\",\n            title: \"UTAT-Team-D\",\n            qualifier: \"SHOULD\",\n            type: \"A type\",\n            description: \"Yet another description that is just a little bit longer\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n        },\n    ],\n  })"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/org-chart/org-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n    props: args,\n})"
                }
            ],
            "src/app/components/merged-components/merged-components.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/merged-components/merged-components.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/merged-components/merged-components.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "defaultValue": "new go.TreeModel({\n  nodeKeyProperty: \"id\",\n  nodeDataArray: [\n      {\n          id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n          parent: \"\",\n          title: \"UTAT-Team-A\",\n          qualifier: \"SHALL\",\n          type: \"Performance\",\n          description: \"A description\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n      },\n      {\n          id: \"123456789\",\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n          title: \"UTAT-Team-B\",\n          qualifier: \"SHOULD\",\n          type: \"Constraint\",\n          description: \"Another description\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/Child-1-123456789\",\n      },\n      {\n          id: \"abcdefghi\",\n          parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n          title: \"UTAT-Team-C\",\n          qualifier: \"SHALL\",\n          type: \"Component Selection\",\n          description:\n              \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/Child-2-abcdefghi\",\n      },\n      {\n          id: \"qwertyuiop\",\n          parent: \"123456789\",\n          title: \"UTAT-Team-D\",\n          qualifier: \"SHOULD\",\n          type: \"A type\",\n          description: \"Yet another description that is just a little bit longer\",\n          rationale: \"A rationale\",\n          url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n      },\n  ],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/merged-components/merged-components.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n    props: args,\n})"
                }
            ],
            "src/app/components/node-directory/node-directory.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "go.TreeModel",
                    "defaultValue": "new go.TreeModel({\n    nodeKeyProperty: \"id\",\n    nodeDataArray: [\n        {\n            id: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            parent: \"\",\n            title: \"UTAT-Team-A\",\n            qualifier: \"SHALL\",\n            type: \"Performance\",\n            description: \"A description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/UTAT-Team-A-74331bc1129c417c850a0a5ca0deb759\",\n        },\n        {\n            id: \"123456789\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-B\",\n            qualifier: \"SHOULD\",\n            type: \"Constraint\",\n            description: \"Another description\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-1-123456789\",\n        },\n        {\n            id: \"abcdefghi\",\n            parent: \"ff5892a7-b5c9-4a25-97bd-663b2cff5bd7\",\n            title: \"UTAT-Team-C\",\n            qualifier: \"SHALL\",\n            type: \"Component Selection\",\n            description:\n                \"A very long form description that may or may not exceed the width of the node. The quick brown fox jumps over the lazy dog. Octopuses have several tentacles. Icecream is cold. Did you know that lava is warm? Lava cake with an ice cream scoop on the side is delicious.\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Child-2-abcdefghi\",\n        },\n        {\n            id: \"qwertyuiop\",\n            parent: \"123456789\",\n            title: \"UTAT-Team-D\",\n            qualifier: \"SHOULD\",\n            type: \"A type\",\n            description: \"Yet another description that is just a little bit longer\",\n            rationale: \"A rationale\",\n            url: \"https://www.notion.so/Grandchild-1-qwertyuiop\",\n        },\n    ],\n  })"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/node-directory/node-directory.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n    props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/merged-components/merged-components.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/merged-components/merged-components.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/merged-components/merged-components.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/merged-components/merged-components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MergedComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeDirectoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/node-directory/node-directory.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Cycle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrgChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/org-chart/org-chart.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/backend.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BackendService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/backend.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Requirements",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}